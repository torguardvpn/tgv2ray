#!/bin/sh /etc/rc.common

START=99
STOP=01
USE_PROCD=1

PROG="/usr/bin/sing-box"
CONFIG_DIR="/etc/tgv2ray"
CONFIG_FILE="$CONFIG_DIR/config.json"
NAME="tgv2ray"

setup_network_interface() {
    # Add proxy network interface for tun0
    uci -q batch <<-EOF
	set network.proxy=interface
	set network.proxy.proto='none'
	set network.proxy.device='tun0'
	commit network
EOF
    
    # Reload network configuration
    /etc/init.d/network reload
}

setup_firewall_rules() {
    # Firewall rules are already set up by uci-defaults
    # Just reload firewall to ensure they are active
    /etc/init.d/firewall reload
    
    # Add additional rules for VPN mode
    # Enable masquerading on the proxy zone
    uci -q batch <<-EOF
	set firewall.proxy.masq='1'
	set firewall.proxy.mtu_fix='1'
	
	# Add forwarding from proxy to wan if not exists
	get firewall.proxy_wan >/dev/null 2>&1 || {
		set firewall.proxy_wan=forwarding
		set firewall.proxy_wan.name='proxy-wan'
		set firewall.proxy_wan.src='proxy'
		set firewall.proxy_wan.dest='wan'
	}
	
	commit firewall
EOF
    
    # Reload firewall again with new rules
    /etc/init.d/firewall reload
}

cleanup_network_interface() {
    # Remove proxy network interface
    uci -q delete network.proxy 2>/dev/null
    uci -q commit network
    /etc/init.d/network reload
}

cleanup_firewall_rules() {
    # No need to disable firewall rules - they just won't be used
    # when the interface is down
    logger -t "$NAME" "Firewall rules remain configured but inactive"
}

start_service() {
    logger -t "$NAME" "Starting service..."
    
    config_load 'tgv2ray'
    
    local enabled
    config_get_bool enabled 'settings' 'enabled' 0
    
    logger -t "$NAME" "Enabled status: $enabled"
    
    [ "$enabled" -eq 0 ] && {
        logger -t "$NAME" "Service is disabled, not starting"
        return 0
    }
    
    # Check if sing-box exists
    if [ ! -x "$PROG" ]; then
        logger -t "$NAME" "Error: sing-box not found at $PROG"
        return 1
    fi
    
    # Generate config
    logger -t "$NAME" "Generating configuration..."
    /usr/bin/tgv2ray-config-gen
    
    if [ ! -f "$CONFIG_FILE" ]; then
        logger -t "$NAME" "Error: Failed to generate configuration"
        return 1
    fi
    
    # Get mode
    local mode
    config_get mode 'settings' 'mode' 'vpn'
    
    # Setup routing for VPN mode
    if [ "$mode" = "vpn" ]; then
        logger -t "$NAME" "Setting up VPN routing..."
        
        # Enable IP forwarding
        sysctl -w net.ipv4.ip_forward=1 >/dev/null
        
        # Setup network interface and firewall rules
        setup_network_interface
        setup_firewall_rules
        
        logger -t "$NAME" "Network interface and firewall rules configured for VPN mode"
    fi
    
    # Start sing-box
    procd_open_instance
    procd_set_param command $PROG run -c "$CONFIG_FILE"
    procd_set_param respawn
    procd_set_param stderr 1
    procd_set_param stdout 1
    procd_set_param pidfile /var/run/$NAME.pid
    
    # Set limits
    procd_set_param limits core="unlimited"
    procd_set_param limits nofile="1000000 1000000"
    
    procd_close_instance
    
    logger -t "$NAME" "Service started in $mode mode"
}

stop_service() {
    logger -t "$NAME" "Stopping service..."
    
    config_load 'tgv2ray'
    local mode
    config_get mode 'settings' 'mode' 'vpn'
    
    # Cleanup VPN mode settings
    if [ "$mode" = "vpn" ]; then
        logger -t "$NAME" "Cleaning up VPN routing..."
        cleanup_network_interface
        cleanup_firewall_rules
    fi
    
    logger -t "$NAME" "Service stopped"
}

reload_service() {
    logger -t "$NAME" "Reloading service..."
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger "tgv2ray"
} 